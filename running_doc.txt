TF1/2

RESOURCES: 
https://wiki.ros.org/tf
Tf1 documentation: http://docs.ros.org/en/melodic/api/tf/html/c++/index.html
http://wiki.ros.org/tf
https://docs.ros2.org/foxy/api/tf2/classtf2_1_1Transform.html
https://docs.ros2.org/foxy/api/tf2/classtf2_1_1Stamped.html
https://docs.ros2.org/foxy/api/tf2/namespacetf2.html
https://docs.ros2.org/foxy/api/tf2/classtf2_1_1BufferCore.html
https://docs.ros2.org/foxy/api/tf2/classtf2_1_1Transform.html
https://docs.ros2.org/foxy/api/tf2/classtf2_1_1tf2Vector4.html
https://docs.ros2.org/foxy/api/tf2/classtf2_1_1Matrix3x3.html#a4f73667442e95618c8a06986b14b022f
http://wiki.ros.org/tf2_eigen


http://wiki.ros.org/tf2/Tutorials/Migration/DataConversions
http://wiki.ros.org/tf2/Tutorials/Create%20Data%20Conversion%20Package%20%28C%2B%2B%29

The Tf1 and 2 API is present in ROS1 and ROS2. Need to include the correct header files and colcon will install them
No package needed
tf2_* packages can be found in the rosdep build farm. There is one for eigen to convert datatypes

ROSDEP BUILD FARM: https://github.com/ros/rosdistro

look for Pose(maybe Transform) and look for getYaw

ULTIMATE ROS2 RESOURCE: https://docs.ros2.org/foxy/api/

tf2::Transform stores the rotation matrix/quaternion & position and has member functions to manipulate the data. Analogous to Pose msg object from geometry messages

Sept, 12 2022:
we can pass a shared pointer to a derived class where a parent class is required. It implicitly casts it. You can cast it explicitly where required
see: https://www.internalpointers.com/post/move-smart-pointers-and-out-functions-modern-c

Sept, 13 2022:
ROS Index: https://index.ros.org/ Contains all packages, their versions and further information. Can clone and build manually or use rosdep and package.xml

Sept 14, 2022
rosdep uses apt keys to find the package and install. It crawls through the package.xml file to find the required packages
You can manually install the package using sudo apt (the apt keys)
You can find the package repo, clone it and build it using colcon (might have to manage dependencies)
https://github.com/ros/rosdistro (can check for packages and their source code)
Look at Linux package managers

ROS resources:
https://github.com/ros
https://github.com/ros2
ros1 API: http://wiki.ros.org/APIs
https://index.ros.org/ 
https://github.com/ros/rosdistro (can check for packages and their source code)
ROSDEP BUILD FARM: https://github.com/ros/rosdistro

time and duration from fundamental message data types has been moved to builtin interfaces package

CURRENT UNDERSTANDING OF CLOCK AND TIME: In ros1, there is simulated clock time and wall time (from the system). They can both be accessed without initialising a node object
                                         In ros2, you need a node to access this default clock
                                         https://answers.ros.org/question/287946/ros-2-time-handling/
                                         http://wiki.ros.org/Clock
                                         http://wiki.ros.org/roscpp_tutorials/Tutorials/Timers
                                         http://wiki.ros.org/roscpp/Overview/Time
                                         https://design.ros2.org/articles/clock_and_time.html

I am porting code from ROS1 to ROS2 and am fumbling when it comes to time, clocks and duration. I understand how it works in ROS1 and its corresponding API. I am unclear as to how it works in ROS2 and why we need a node to get the time (e.g. node->get_clock()->now() in ROS2 vs ros::Time::now() in ROS1)

Can someone please conceptually explain how time works in ROS2 and how it is different from ROS1? 

Thank you in advance!

Could someone please explain how time, clock and duration work in ROS2 and how it is different from ROS1? 

Sept15, 2022
Can implement and write your own tf conversion package by overloading the tf2::doTransform templated function
Refer to already implemented functions like tf2_bullet etc.
See: http://wiki.ros.org/tf2/Tutorials/Migration/DataConversions
    http://wiki.ros.org/tf2/Tutorials/Create%20Data%20Conversion%20Package%20%28C%2B%2B%29

tf2_* conversion references
http://wiki.ros.org/tf2/Tutorials/Migration/DataConversions
                 * https://wiki.ros.org/tf2_ros
                 * http://wiki.ros.org/tf2_geometry_msgs
                 * http://docs.ros.org/en/noetic/api/tf2_geometry_msgs/html/c++/
                 * http://docs.ros.org/en/noetic/api/tf2/html/namespacetf2.html#af1255c37833c838543b512febce5e9b1
                 * http://wiki.ros.org/tf2/Tutorials/Create%20Data%20Conversion%20Package%20%28C%2B%2B%29
                 * 

Sept 16, 2022
When constructor chaining, you can only call the immediate parent constructor
You need to pass all values to the last constructor and chain them upwards through the constructors
See: https://www.learncpp.com/cpp-tutorial/constructors-and-initialization-of-derived-classes/

Sept 19, 2022:
You have to set explicit getters and setters in order to access private elements of a class (just like they do with tf2 data types)

you need to export miscellaneous things (packages, include, dependencies, targets, etc.) so downstream packages can implicitly include them 
Look at ament_export_* documentation 

USE ros2 parameter api to set parameters in real time
Look at example here: https://github.com/carla-simulator/ros-bridge/blob/master/carla_ackermann_control/src/carla_ackermann_control/carla_ackermann_control_node.py